version: 2

# Yaml References enable us to DRY out our config by sharing variables across multiple jobs.
# In this case, we are commonly using the "workspaces" feature to share
# build artifacts and files across jobs. 
references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root
  working_dir_root: &working_dir_root
    ~/esp32-firmware/
  deploy_tool_docker_img: &deploy_tool_docker_img
    kienaudio/deploy_tools:v0.7


jobs:
  test:
    working_directory: *working_dir_root
    docker:
      - image: rikorose/gcc-cmake
    steps:
      - checkout
      - run: cd test && cmake .
      - run: cd test && make all test
  
  build:
    working_directory: *working_dir_root
    docker:
        - image: kienaudio/esp-idf-ci-env:v4.1
    steps:
      - checkout
      - run:
          command: |
            echo "Building"
            echo "IDF_PATH := $IDF_PATH" > Makefile.local
            mkdir ~/repo/
            ls   
            cd ~/repo/

      - run: 
          command: |
            cd $IDF_PATH
            . $IDF_PATH/export.sh
            cd ~/esp32-firmware/
            make size
            make CONFIG_IS_SUBWOOFER=1 all
            make CONFIG_IS_SUBWOOFER=1 size



      # - run: 
      #     command: |
      #       mkdir -p /tmp/workspace/firmware
      #       echo "Hello, world!" > /tmp/workspace/firmware/echo-output

      #       cd ~/esp32-firmware/
      #       ls
      #       cd build
      #       cp esp32-firmware.bin /tmp/workspace/firmware
      - run: 
          command: |
            mkdir -p /tmp/workspace/firmware
            cd ~/esp32-firmware/
            cd build
            cp esp32-firmware.bin /tmp/workspace/firmware


      - persist_to_workspace:
          root: *workspace_root
          paths:
            # - firmware/echo-output
            - firmware/esp32-firmware.bin


  finalize-release: 
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "a6:ee:80:03:82:20:e6:ed:3f:fa:96:82:07:d2:79:66"

      - run:
          command: |
            echo "Finalizing firmware release"  
            cd ~/esp32-firmware/
            git rev-parse --abbrev-ref HEAD
            python3  $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t finish -m esp -b $(git rev-parse --abbrev-ref HEAD)


  prepare-and-validate-firmware-for-deploy:
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img
    steps:
      - *attach_workspace
      - checkout

      #Prepare the firmware for deployment
      - run:
          command: |
            echo "Preparing firmware for deployment"
            python3 $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t encode -m esp -s sub -d /tmp/workspace/firmware/ 
 
      #Validate the firmware for deployment. 
      #Since firmware name is currently unknown, pass as file the special character *. This will only work with one file in folder
      - run:
          command: |
            echo "Preparing firmware for deployment"
            python3 $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t validate -m esp -f /tmp/workspace/firmware/*


      - persist_to_workspace:
          root: *workspace_root
          paths:
            - firmware/*

      # - store_artifacts:
      #     path: /tmp/workspace/firmware/


  deploy-prod:
    docker:
      - image: *deploy_tool_docker_img
    steps:
      - checkout
      - run:
          command: |
            echo "Deploying firmware to production environment"  
            echo $DEPLOY_TOOLS_PATH
            cd $DEPLOY_TOOLS_PATH/deploy_manager
            python3 deploy.py -h


  deploy-test:
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img    
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            echo "Deploying firmware to test environment"
            echo $DEPLOY_TOOLS_PATH
            cd $DEPLOY_TOOLS_PATH/deploy_manager
            python3 file_encoder.py -h

      - run:
          command: |
            cd /tmp/workspace/firmware/
            ls 

      # - run: |
      #     if [[ `cat /tmp/workspace/firmware/echo-output` == "Hello, world!" ]]; then
      #       echo "It worked!";
      #     else
      #       echo "Nope!"; exit 1
      #     fi

      # - store_artifacts:
      #     path: /tmp/workspace/firmware/esp32-firmware.bin
      #     destination: aritifact-firmware

      - store_artifacts:
          path: /tmp/workspace/firmware/

workflows:
  version: 2
  build_and_test_and_deploy:
    jobs:
      - build
      - test

      #Ensure manual approval before closing release
      - wait-release-approval:
          type: approval
          requires:
            - build 
            - test
          filters:
            branches:
              only:  /release\/.*/

      - finalize-release: 
          requires:
            - wait-release-approval 
          filters:
            branches:
              only:  /release\/.*/

      - prepare-and-validate-firmware-for-deploy:
          requires:
            - test
            - build
          filters:
            branches:
              only:  
              -  master
              -  /feature\/.*/ 

      - wait-deploy-prod-approval:
          type: approval
          requires:
            - prepare-and-validate-firmware-for-deploy
          filters: 
            branches:
              only: master   
      
      #Run deploy-test only when current branch only when the current branch is the master branch
      #Requires manual approval from CircleCI pipeline home page 
      - deploy-prod:
          requires: 
            - wait-deploy-prod-approval   
          filters: 
            branches:
              only: master

      #Run deploy-test only when current branch is not the master branch        
      - deploy-test:
          requires: 
            - prepare-and-validate-firmware-for-deploy
          filters: 
            branches:
              ignore: master  
