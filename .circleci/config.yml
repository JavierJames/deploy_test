version: 2

# Yaml References enable us to DRY out our config by sharing variables across multiple jobs.
# In this case, we are commonly using the "workspaces" feature to share
# build artifacts and files across jobs. 
references:
  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  working_dir_root: &working_dir_root
    ~/esp32-firmware/

  deploy_tool_docker_img: &deploy_tool_docker_img
    kienaudio/deploy_tools:v0.7


jobs:
  test:
    working_directory: *working_dir_root
    docker:
      - image: rikorose/gcc-cmake
    steps:
      - checkout
      - run: cd test && cmake .
      - run: cd test && make all test
  
  #Build firmware for subwoofer. One job must remain naming build, for the command line  circleci program to work
  build:
    working_directory: *working_dir_root
    docker:
        - image: kienaudio/esp-idf-ci-env:v4.1
    steps:
      - checkout
      - run:
          command: |
            echo "Building"
            echo "IDF_PATH := $IDF_PATH" > Makefile.local
            mkdir ~/repo/
            ls   
            cd ~/repo/

      - run: 
          command: |
            cd $IDF_PATH
            . $IDF_PATH/export.sh
            cd ~/esp32-firmware/
            make size
            make CONFIG_IS_SUBWOOFER=1 all
            make CONFIG_IS_SUBWOOFER=1 size

      - run: 
          command: |
            mkdir -p /tmp/workspace/firmware/sub
            cd ~/esp32-firmware/
            cd build
            cp esp32-firmware.bin /tmp/workspace/firmware/sub

      #Put folder with firmware in a layer for the next job the requires this job
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - firmware/sub/esp32-firmware.bin


  #Build firmware for satellite
  build_sat:
    working_directory: *working_dir_root
    docker:
        - image: kienaudio/esp-idf-ci-env:v4.1
    steps:
      - checkout
      - run:
          command: |
            echo "Building"
            echo "IDF_PATH := $IDF_PATH" > Makefile.local
            mkdir ~/repo/
            ls   
            cd ~/repo/

      - run: 
          command: |
            cd $IDF_PATH
            . $IDF_PATH/export.sh
            cd ~/esp32-firmware/
            make size
            make all

      - run: 
          command: |
            mkdir -p /tmp/workspace/firmware/sat
            cd ~/esp32-firmware/
            cd build
            cp esp32-firmware.bin /tmp/workspace/firmware/sat

      #Put folder with firmware in a layer for the next job the requires this job
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - firmware/sat/esp32-firmware.bin


  finalize_release: 
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "a6:ee:80:03:82:20:e6:ed:3f:fa:96:82:07:d2:79:66"

      - run:
          command: |
            echo "Finalizing firmware release"  
            cd ~/esp32-firmware/
            git rev-parse --abbrev-ref HEAD
            python3  $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t finish -m esp -b $(git rev-parse --abbrev-ref HEAD)


  #Prepare and validate the firmware for a sub
  prepare_and_validate_firmware_sub:
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img
    steps:
      - *attach_workspace
      - checkout

      #Prepare the firmware for deployment
      - run:
          command: |
            echo "Preparing firmware for deployment"
            python3 $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t encode -m esp -s sub -d /tmp/workspace/firmware/sub/ 
 
      #Validate the firmware for deployment. 
      #Since firmware name is currently unknown, pass as file the special character *. This will only work with one file in folder
      - run:
          command: |
            echo "Preparing firmware for deployment"
            python3 $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t validate -m esp -f /tmp/workspace/firmware/sub/*
            ls /tmp/workspace/firmware/sub 

      #Remove first firmware
      - run:
          command: |
            mkdir -p /tmp/workspace/firmware/sub/deploy/
            cp /tmp/workspace/firmware/sub/*.bin  /tmp/workspace/firmware/sub/deploy/

      #Put folder with firmware in a layer for the next job the requires this job
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - firmware/sub/deploy/*

      # #Put the deploy firmware as artifact
      # - store_artifacts:
      #     path: /tmp/workspace/firmware/sub/deploy/


  #Prepare and validate the firmware for a sat
  prepare_and_validate_firmware_sat:
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img
    steps:
      - *attach_workspace
      - checkout

      #Prepare the firmware for deployment
      - run:
          command: |
            echo "Preparing firmware for deployment"
            python3 $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t encode -m esp -s sat -d /tmp/workspace/firmware/sat/ 
 
      #Validate the firmware for deployment. 
      #Since firmware name is currently unknown, pass as file the special character *. This will only work with one file in folder
      - run:
          command: |
            echo "Preparing firmware for deployment"
            python3 $DEPLOY_TOOLS_PATH/deploy_manager/kdm.py -p prod -t validate -m esp -f /tmp/workspace/firmware/sat/*
            ls /tmp/workspace/firmware/sat 

      #Remove first firmware
      - run:
          command: |
            mkdir -p /tmp/workspace/firmware/sat/deploy/
            cp /tmp/workspace/firmware/sat/*.bin  /tmp/workspace/firmware/sat/deploy/

      #Put folder with firmware in a layer for the next job the requires this job
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - firmware/sat/deploy/*

      # #Put the deploy firmware as artifact
      # - store_artifacts:
      #     path: /tmp/workspace/firmware/sat/deploy/


  deploy_prod:
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img    
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            echo "Deploying all firmware to production environment" 
            echo $DEPLOY_TOOLS_PATH
            cd $DEPLOY_TOOLS_PATH/deploy_manager
            python3 deploy.py -h

      #This command will show the /tmp/workspace/firmware/esp32-firmware, since a job in a higher level added this firmare to that layer.
      #Addtionally the encoded firwmare in /tmp/workspace/firmware/deploy/ will be shown.
      - run:
          command: |
            ls /tmp/workspace/firmware/
            ls /tmp/workspace/firmware/sub/
            ls /tmp/workspace/firmware/sub/deploy/
            ls /tmp/workspace/firmware/sat/
            ls /tmp/workspace/firmware/sat/deploy/


      #Put the deploy firmware as artifact
      - store_artifacts:
          path: /tmp/workspace/firmware/sub/deploy/
      - store_artifacts:
          path: /tmp/workspace/firmware/sat/deploy/


  deploy_pre_prod:
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img    
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            echo "Deploying firmware to test environment"
            echo $DEPLOY_TOOLS_PATH
            cd $DEPLOY_TOOLS_PATH/deploy_manager
            python3 deploy.py -h

      #This command will show the /tmp/workspace/firmware/esp32-firmware, since a job in a higher level added this firmare to that layer.
      #Addtionally the encoded firwmare in /tmp/workspace/firmware/deploy/ will be shown.
      - run:
          command: |
            ls /tmp/workspace/firmware/
            ls /tmp/workspace/firmware/sub/
            ls /tmp/workspace/firmware/sub/deploy/
            ls /tmp/workspace/firmware/sat/
            ls /tmp/workspace/firmware/sat/deploy/


      #Put the deploy firmware as artifact
      - store_artifacts:
          path: /tmp/workspace/firmware/sub/deploy/
      - store_artifacts:
          path: /tmp/workspace/firmware/sat/deploy/



create_firmware_artifacts:
    working_directory: *working_dir_root
    docker:
      - image: *deploy_tool_docker_img    
    steps:
      - *attach_workspace
      - checkout
            

      #This command will show the /tmp/workspace/firmware/esp32-firmware, since a job in a higher level added this firmare to that layer.
      #Addtionally the encoded firwmare in /tmp/workspace/firmware/deploy/ will be shown.
      - run:
          command: |
            echo "Extracting firmware as artifacts"
            ls /tmp/workspace/firmware/
            ls /tmp/workspace/firmware/sub/
            ls /tmp/workspace/firmware/sub/deploy/
            ls /tmp/workspace/firmware/sat/
            ls /tmp/workspace/firmware/sat/deploy/


      #Put the deploy firmware as artifact
      - store_artifacts:
          path: /tmp/workspace/firmware/sub/deploy/
      - store_artifacts:
          path: /tmp/workspace/firmware/sat/deploy/



workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build
      - build_sat
      - test

      - prepare_and_validate_firmware_sub:
          requires:
            - test
            - build
          filters:
            branches:
              only:  
              - master
              - /feature\/.*/ 
              - /release\/.*/

      - prepare_and_validate_firmware_sat:
          requires:
            - test
            - build_sat
          filters:
            branches:
              only:  
              - master
              - /feature\/.*/ 
              - /release\/.*/


      #Ensure manual approval before closing release
      - wait_release_approval:
          type: approval
          requires:
            - prepare_and_validate_firmware_sub 
            - prepare_and_validate_firmware_sat
          filters:
            branches:
              only:  /release\/.*/

      - finalize_release: 
          requires:
            - wait_release_approval 
          filters:
            branches:
              only:  /release\/.*/


      # - wait_deploy_prod_approval_sub:
      #     type: approval
      #     requires:
      #       - prepare_and_validate_firmware_sub
      #     filters: 
      #       branches:
      #         only: master   

      - wait_deploy_prod_approval:
          type: approval
          requires:
            - prepare_and_validate_firmware_sub
            - prepare_and_validate_firmware_sat
          filters: 
            branches:
              only: master   

      #Run deploy_pre_prod only when current branch only when the current branch is the master branch
      #Requires manual approval from CircleCI pipeline home page 
      - deploy_prod:
          requires: 
            - wait_deploy_prod_approval   
          filters: 
            branches:
              only: master

      # #Wait until approval before deploy to pre-production environment
      # - wait_deploy_pre_prod_approval:
      #     type: approval
      #     requires:
      #       - prepare_and_validate_firmware_sub
      #       - prepare_and_validate_firmware_sat
      #     filters: 
      #       branches:
      #         ignore: master 


      # #Run deploy_pre_prod only when current branch is not the master branch        
      # - deploy_pre_prod:
      #     requires: 
      #       - wait_deploy_pre_prod_approval
      #     filters: 
      #       branches:
      #         ignore: master  


      - create_firmware_artifacts:
          requires:
            - prepare_and_validate_firmware_sub
            - prepare_and_validate_firmware_sat